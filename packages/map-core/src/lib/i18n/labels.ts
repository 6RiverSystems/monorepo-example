import { FaultState, FaultResolution } from '@sixriver/mfp_lib_js/browser';

import { Phase, MotionState, WorkState } from '../interfaces/mfp';

export const labels = {
	unknown: {
		mfpName: 'unknown MFP',
		userName: 'unknown user',
		phase: 'unknown',
		workState: 'unknown',
	},
	FaultState: new Map([
		[FaultState.FRONT_EMERGENCY_STOP, 'front emergency stop'],
		[FaultState.BACK_EMERGENCY_STOP, 'back emergency stop'],
		[FaultState.BUMP_SENSOR, 'bump sensor'],
		[FaultState.PAUSE, 'pause'],
		[FaultState.HARD_STOP, 'hard stop'],
		[FaultState.SAFETY_PROCESSOR_FAILURE, 'safety processor failure'],
		[FaultState.BRAINSTEM_FAILURE, 'brainstem failure'],
		[FaultState.BRAINSTEM_TIMEOUT, 'brainstem timeout'],
		[FaultState.BRAIN_TIMEOUT, 'brain timeout'],
		[FaultState.MOTOR_CONTROLLER_OVERSPEED, 'motor controller overspeed'],
		[FaultState.IRDA_COMMUNICATION_FAILURE, 'irda communication failure'],
		[FaultState.RPM_MESSAGE_TIMEOUT, 'rpm message timeout'],
		[FaultState.VELOCITY_VIOLATION, 'velocity violation'],
		[FaultState.CHARGE_PORT_ERROR, 'charge port error'],
		[FaultState.TOF_COMMUNICATION_FAILURE, 'tof communication failure'],
		[FaultState.TEMP_COMMUNICATION_FAILURE, 'temp communication failure'],
		[FaultState.CHARGING_TEMP_OVERTEMPERATURE, 'charging temp overtemperature'],
		[FaultState.BATTERY_COMMUNICATION_FAILURE, 'battery communication failure'],
		[FaultState.BATTERY_LOW, 'battery low'],
		[FaultState.LIDAR_SENSOR_CONNECTED, 'lidar sensor connected'],
		[FaultState.LIDAR_SENSOR_CALIBRATED, 'lidar sensor calibrated'],
		[FaultState.FRONT_FORWARD_RGBD_SENSOR_CONNECTED, 'front forward rgbd sensor connected'],
		[FaultState.FRONT_FORWARD_RGBD_SENSOR_CALIBRATED, 'front forward rgbd sensor calibrated'],
		[FaultState.COGNEX_SCANNER_SENSOR_CONNECTED, 'cognex scanner sensor connected'],
		[FaultState.WFM_CONNECTED, 'wfm connected'],
		[FaultState.NAVIGATION_LOST, 'navigation lost'],
		[FaultState.NAVIGATION_STUCK, 'navigation stuck'],
		[FaultState.NAVIGATION_INVALID_GOAL, 'navigation invalid goal'],
		[FaultState.HAND_SCANNER_SENSOR_CONNECTED, 'hand scanner sensor connected'],
		[FaultState.FRONT_DOWNWARD_RGBD_SENSOR_CONNECTED, 'front downward rgbd sensor connected'],
		[FaultState.FRONT_DOWNWARD_RGBD_SENSOR_CALIBRATED, 'front downward rgbd sensor calibrated'],
		[FaultState.BLUETOOTH_RING_SCANNER_SENSOR_CONNECTED, 'bluetooth ring scanner sensor connected'],
		[FaultState.SAFETY_CIRCUIT, 'safety circuit'],
		[FaultState.SAFETY_TIME_OF_FLIGHT_FAILURE, 'safety time of flight failure'],
		[FaultState.SAFETY_LEFT_SPEED_FAILURE, 'safety left speed failure'],
		[FaultState.SAFETY_RIGHT_SPEED_FAILURE, 'safety right speed failure'],
		[FaultState.SAFETY_BOARD_FAILURE, 'safety board failure'],
		[FaultState.NAVIGATION_GLOBAL_PLAN_FAILURE, 'navigation global plan failure'],
		[
			FaultState.NAVIGATION_GLOBAL_PLAN_FAILURE_ACCOMPANIED,
			'navigation global plan failure accompanied',
		],
		[FaultState.NAVIGATION_LOCAL_PLAN_FAILURE, 'navigation local plan failure'],
		[FaultState.NAVIGATION_LOCAL_PLAN_FAILURE_ACCOMPANIED, 'navigation local plan accompanied'],
		[FaultState.NAVIGATION_RECOVERY, 'navigation recovery'],
		[FaultState.FRONT_FORWARD_CAMERA_BLOCKED, 'front forward camera blocked'],
		[FaultState.FRONT_DOWNWARD_CAMERA_BLOCKED, 'front downward camera blocked'],
		[FaultState.REAR_DOWNWARD_CAMERA_BLOCKED, 'downward camera blocked'],
	]),
	FaultResolution: new Map([
		[FaultResolution.NONE, ''],
		[FaultResolution.REBOOT, 'reboot'],
		[FaultResolution.FATAL, 'contact customer support'],
		[FaultResolution.RELEASE, 'release emergency stop button'],
		[FaultResolution.PAUSE, 'unpause'],
		[FaultResolution.CHECK_CABLE, 'check cable'],
		[FaultResolution.CALIBRATE, 'calibrate'],
		[FaultResolution.CONTACT_SUPPORT, 'contact support'],

		[FaultResolution.NETWORK_CONNECTION, 'check network connection'],
		[FaultResolution.LOCALIZE, 'localize'],
		[FaultResolution.CHARGE, 'charge'],
		[FaultResolution.RELOCATE, 'move to home location'],
		[FaultResolution.CHECK_CHARGE_PORT, 'check charge port'],

		[FaultResolution.LOCALIZE_HOME_LOCATIONS, 'localize home locations'],
		[FaultResolution.LOCALIZE_APRIL_TAGS, 'localize april tags'],
		[FaultResolution.PAIR_BLUETOOTH, 'pair bluetooth'],
	]),
	MotionState: new Map([
		[MotionState.IDLE, 'idle'],
		[MotionState.TRAVELING, 'traveling'],
		[MotionState.PAUSED, 'paused'],
		[MotionState.CHARGING, 'charging'],
		[MotionState.DOCKING, 'docking'],
	]),
	Phase: new Map([
		[Phase.BOOTING, 'booting'],
		[Phase.INDUCT, 'induct'],
		[Phase.OFFLINE, 'offline'],
		[Phase.PREPICK, 'prepick'],
		[Phase.PICKING, 'picking'],
		[Phase.RESTAGE, 'restage'],
		[Phase.TAKEOFF, 'takeoff'],
		[Phase.CHARGE, 'charge'],
		[Phase.CHARGED, 'charged'],
		[Phase.USER_DIRECTED_INDUCT, 'user directed induct'],
		[Phase.PACKOUT, 'packout'],
	]),
	WorkState: new Map([
		[WorkState.UNKNOWN, 'unknown'],
		[WorkState.AVAILABLE, 'available'],
		[WorkState.ALLOCATED, 'allocated'],
		[WorkState.OFFLINE, 'offline'],
	]),
	Faults: 'faults',
};
