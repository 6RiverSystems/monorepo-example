import {inject} from '@loopback/context';
import {
	FindRoute,
	InvokeMethod,
	ParseParams,
	Reject,
	RequestContext,
	RestBindings,
	Send,
	SequenceHandler,
} from '@loopback/rest';

const SequenceActions = RestBindings.SequenceActions;

export class TemplateServiceSequence implements SequenceHandler {
	constructor(
		@inject(SequenceActions.FIND_ROUTE) protected findRoute: FindRoute,
		@inject(SequenceActions.PARSE_PARAMS) protected parseParams: ParseParams,
		@inject(SequenceActions.INVOKE_METHOD) protected invoke: InvokeMethod,
		@inject(SequenceActions.SEND) public send: Send,
		@inject(SequenceActions.REJECT) public reject: Reject,
	) {
		// nothing to do here, just the injected members
	}

	// this function is boilerplate generated by loopback
	// and doesn't merit testing or coverage checks
	/* istanbul ignore next */
	async handle(context: RequestContext) {
		try {
			const {request, response} = context;
			const route = this.findRoute(request);
			const args = await this.parseParams(request, route);
			const result = await this.invoke(route, args);
			this.send(response, result);
		} catch (err) {
			this.reject(context, err);
		}
	}
}
